services:
  mongo:
    container_name: "mongo"
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME:-root}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:-example}"
    ports:
      - "27017:27017"
    volumes:
      - .data/db:/data/db
    networks:
      - conserver
  
  mongo-express:
    container_name: "mongo-express"
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${MONGO_INITDB_ROOT_USERNAME:-root}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:-example}"
      ME_CONFIG_MONGODB_URL: "${MONGO_URL:-mongodb://root:example@mongo:27017/}"
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_SITE_BASEURL: "/mongo-express"
    ports:
      - "8081"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.entrypoints=websecure"
      - "traefik.http.routers.mongo-express.tls.certresolver=myresolver"
      - "traefik.http.routers.mongo-express.rule=Host(`${DNS_HOST}`) && PathPrefix(`/mongo-express`)"
      - "traefik.http.routers.mongo-express.middlewares=auth-middleware@file"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"  # Add this label
    networks:
      - conserver


  traefik:
    # The official v3 Traefik docker image
    image: traefik:v3.2
    container_name: "traefik"
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.file.directory=/etc/traefik/dynamic" 
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${DNS_REGISTRATION_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      #- "--certificatesresolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"

    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - ./traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dynamic:/etc/traefik/dynamic
      - letsencrypt:/letsencrypt

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=PathPrefix(`/traefik`) "
      - "traefik.http.routers.traefik.service=api@internal"

    networks:
      - conserver

  admin:
    container_name: "admin"
    build:
      dockerfile: ./Dockerfile
      context: .
    command: "streamlit run ./admin.py --server.port 8501 --server.baseUrlPath /admin"
    ports:
      - "8501"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - mongo
    stop_grace_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`${DNS_HOST}`) && PathPrefix(`/admin`) "
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=myresolver"
      - "traefik.http.routers.admin.middlewares=auth-middleware@file"      
      - "traefik.http.services.admin.loadbalancer.server.port=8501"
    networks:
      - conserver

volumes:
  es_data:
    driver: local
  mongo-data:
    driver: local
  wordpress_data:
    driver: local
  wordpress_db_data:
    driver: local
  letsencrypt:
    driver: local

# docker-compose-1.yml
networks:
  conserver:
    external: true
